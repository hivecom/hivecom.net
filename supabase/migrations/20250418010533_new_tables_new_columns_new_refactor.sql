DROP POLICY "Everyone can SELECT gameserver containers" ON "public"."gameserver_containers";

REVOKE DELETE ON TABLE "public"."gameserver_containers" FROM "anon";

REVOKE INSERT ON TABLE "public"."gameserver_containers" FROM "anon";

REVOKE REFERENCES ON TABLE "public"."gameserver_containers" FROM "anon";

REVOKE SELECT ON TABLE "public"."gameserver_containers" FROM "anon";

REVOKE TRIGGER ON TABLE "public"."gameserver_containers" FROM "anon";

REVOKE TRUNCATE ON TABLE "public"."gameserver_containers" FROM "anon";

REVOKE UPDATE ON TABLE "public"."gameserver_containers" FROM "anon";

REVOKE DELETE ON TABLE "public"."gameserver_containers" FROM "authenticated";

REVOKE INSERT ON TABLE "public"."gameserver_containers" FROM "authenticated";

REVOKE REFERENCES ON TABLE "public"."gameserver_containers" FROM "authenticated";

REVOKE SELECT ON TABLE "public"."gameserver_containers" FROM "authenticated";

REVOKE TRIGGER ON TABLE "public"."gameserver_containers" FROM "authenticated";

REVOKE TRUNCATE ON TABLE "public"."gameserver_containers" FROM "authenticated";

REVOKE UPDATE ON TABLE "public"."gameserver_containers" FROM "authenticated";

REVOKE DELETE ON TABLE "public"."gameserver_containers" FROM "service_role";

REVOKE INSERT ON TABLE "public"."gameserver_containers" FROM "service_role";

REVOKE REFERENCES ON TABLE "public"."gameserver_containers" FROM "service_role";

REVOKE SELECT ON TABLE "public"."gameserver_containers" FROM "service_role";

REVOKE TRIGGER ON TABLE "public"."gameserver_containers" FROM "service_role";

REVOKE TRUNCATE ON TABLE "public"."gameserver_containers" FROM "service_role";

REVOKE UPDATE ON TABLE "public"."gameserver_containers" FROM "service_role";

-- Create the new containers table first
CREATE TABLE "public"."containers"(
  "name" text NOT NULL,
  "created_at" timestamp with time zone NOT NULL DEFAULT NOW(),
  "running" boolean NOT NULL,
  "healthy" boolean NOT NULL,
  "reported_at" timestamp without time zone NOT NULL,
  "server" bigint,
  "uptime" bigint,
  "addresses" text[]
);

ALTER TABLE "public"."containers" ENABLE ROW LEVEL SECURITY;

COMMENT ON TABLE "public"."containers" IS 'Containers and their respective states';

-- Copy data from old table to new table BEFORE dropping the old table
INSERT INTO "public"."containers"(name, created_at, running, healthy, reported_at, server, uptime)
SELECT
  name,
  created_at,
  running,
  healthy,
  reported_at,
  SERVER,
  uptime
FROM
  "public"."gameserver_containers";

-- Now it's safe to drop constraints and the old table
ALTER TABLE "public"."gameserver_containers"
  DROP CONSTRAINT "gameserver_containers_server_fkey";

ALTER TABLE "public"."gameservers"
  DROP CONSTRAINT "gameservers_container_fkey";

ALTER TABLE "public"."gameserver_containers"
  DROP CONSTRAINT "gameserver_containers_pkey";

DROP INDEX IF EXISTS "public"."gameserver_containers_pkey";

DROP TABLE "public"."gameserver_containers";

CREATE TABLE "public"."expenses"(
  "id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  "created_at" timestamp with time zone NOT NULL DEFAULT NOW(),
  "started_at" timestamp with time zone NOT NULL DEFAULT NOW(),
  "ended_at" timestamp with time zone,
  "created_by" uuid,
  "modified_by" uuid,
  "amount" integer NOT NULL DEFAULT 0,
  "name" text,
  "description" text,
  "url" text
);

ALTER TABLE "public"."expenses" ENABLE ROW LEVEL SECURITY;

COMMENT ON TABLE "public"."expenses" IS 'Monthly expenses of Hivecom';

CREATE TABLE "public"."monthly_funding"(
  "month" date NOT NULL DEFAULT '2025-01-01' ::date,
  "patreon" integer DEFAULT 0,
  "donation" integer DEFAULT 0
);

ALTER TABLE "public"."monthly_funding" ENABLE ROW LEVEL SECURITY;

COMMENT ON TABLE "public"."monthly_funding" IS 'Monthly funding information';

ALTER TABLE "public"."gameservers"
  ADD COLUMN "markdown" text;

ALTER TABLE "public"."profiles"
  DROP COLUMN "nickname";

ALTER TABLE "public"."profiles"
  ADD COLUMN "username" text NOT NULL;

CREATE UNIQUE INDEX expenses_pkey ON public.expenses USING btree(id);

CREATE UNIQUE INDEX monthly_funding_month_key ON public.monthly_funding USING btree(month);

CREATE UNIQUE INDEX monthly_funding_pkey ON public.monthly_funding USING btree(month);

CREATE UNIQUE INDEX profiles_username_key ON public.profiles USING btree(username);

CREATE UNIQUE INDEX gameserver_containers_pkey ON public.containers USING btree(name);

ALTER TABLE "public"."containers"
  ADD CONSTRAINT "gameserver_containers_pkey" PRIMARY KEY USING INDEX "gameserver_containers_pkey";

ALTER TABLE "public"."expenses"
  ADD CONSTRAINT "expenses_pkey" PRIMARY KEY USING INDEX "expenses_pkey";

ALTER TABLE "public"."monthly_funding"
  ADD CONSTRAINT "monthly_funding_pkey" PRIMARY KEY USING INDEX "monthly_funding_pkey";

ALTER TABLE "public"."containers"
  ADD CONSTRAINT "gameserver_containers_server_fkey" FOREIGN KEY (SERVER) REFERENCES servers(id) ON UPDATE CASCADE ON DELETE CASCADE NOT valid;

ALTER TABLE "public"."containers" validate CONSTRAINT "gameserver_containers_server_fkey";

ALTER TABLE "public"."expenses"
  ADD CONSTRAINT "expenses_created_by_fkey" FOREIGN KEY (created_by) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE SET NULL NOT valid;

ALTER TABLE "public"."expenses" validate CONSTRAINT "expenses_created_by_fkey";

ALTER TABLE "public"."expenses"
  ADD CONSTRAINT "expenses_modified_by_fkey" FOREIGN KEY (modified_by) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE SET NULL NOT valid;

ALTER TABLE "public"."expenses" validate CONSTRAINT "expenses_modified_by_fkey";

ALTER TABLE "public"."monthly_funding"
  ADD CONSTRAINT "monthly_funding_month_key" UNIQUE USING INDEX "monthly_funding_month_key";

ALTER TABLE "public"."profiles"
  ADD CONSTRAINT "profiles_username_key" UNIQUE USING INDEX "profiles_username_key";

ALTER TABLE "public"."gameservers"
  ADD CONSTRAINT "gameservers_container_fkey" FOREIGN KEY (container) REFERENCES containers(name) ON UPDATE CASCADE ON DELETE CASCADE NOT valid;

ALTER TABLE "public"."gameservers" validate CONSTRAINT "gameservers_container_fkey";

GRANT DELETE ON TABLE "public"."containers" TO "anon";

GRANT INSERT ON TABLE "public"."containers" TO "anon";

GRANT REFERENCES ON TABLE "public"."containers" TO "anon";

GRANT SELECT ON TABLE "public"."containers" TO "anon";

GRANT TRIGGER ON TABLE "public"."containers" TO "anon";

GRANT TRUNCATE ON TABLE "public"."containers" TO "anon";

GRANT UPDATE ON TABLE "public"."containers" TO "anon";

GRANT DELETE ON TABLE "public"."containers" TO "authenticated";

GRANT INSERT ON TABLE "public"."containers" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."containers" TO "authenticated";

GRANT SELECT ON TABLE "public"."containers" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."containers" TO "authenticated";

GRANT TRUNCATE ON TABLE "public"."containers" TO "authenticated";

GRANT UPDATE ON TABLE "public"."containers" TO "authenticated";

GRANT DELETE ON TABLE "public"."containers" TO "service_role";

GRANT INSERT ON TABLE "public"."containers" TO "service_role";

GRANT REFERENCES ON TABLE "public"."containers" TO "service_role";

GRANT SELECT ON TABLE "public"."containers" TO "service_role";

GRANT TRIGGER ON TABLE "public"."containers" TO "service_role";

GRANT TRUNCATE ON TABLE "public"."containers" TO "service_role";

GRANT UPDATE ON TABLE "public"."containers" TO "service_role";

GRANT DELETE ON TABLE "public"."expenses" TO "anon";

GRANT INSERT ON TABLE "public"."expenses" TO "anon";

GRANT REFERENCES ON TABLE "public"."expenses" TO "anon";

GRANT SELECT ON TABLE "public"."expenses" TO "anon";

GRANT TRIGGER ON TABLE "public"."expenses" TO "anon";

GRANT TRUNCATE ON TABLE "public"."expenses" TO "anon";

GRANT UPDATE ON TABLE "public"."expenses" TO "anon";

GRANT DELETE ON TABLE "public"."expenses" TO "authenticated";

GRANT INSERT ON TABLE "public"."expenses" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."expenses" TO "authenticated";

GRANT SELECT ON TABLE "public"."expenses" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."expenses" TO "authenticated";

GRANT TRUNCATE ON TABLE "public"."expenses" TO "authenticated";

GRANT UPDATE ON TABLE "public"."expenses" TO "authenticated";

GRANT DELETE ON TABLE "public"."expenses" TO "service_role";

GRANT INSERT ON TABLE "public"."expenses" TO "service_role";

GRANT REFERENCES ON TABLE "public"."expenses" TO "service_role";

GRANT SELECT ON TABLE "public"."expenses" TO "service_role";

GRANT TRIGGER ON TABLE "public"."expenses" TO "service_role";

GRANT TRUNCATE ON TABLE "public"."expenses" TO "service_role";

GRANT UPDATE ON TABLE "public"."expenses" TO "service_role";

GRANT DELETE ON TABLE "public"."monthly_funding" TO "anon";

GRANT INSERT ON TABLE "public"."monthly_funding" TO "anon";

GRANT REFERENCES ON TABLE "public"."monthly_funding" TO "anon";

GRANT SELECT ON TABLE "public"."monthly_funding" TO "anon";

GRANT TRIGGER ON TABLE "public"."monthly_funding" TO "anon";

GRANT TRUNCATE ON TABLE "public"."monthly_funding" TO "anon";

GRANT UPDATE ON TABLE "public"."monthly_funding" TO "anon";

GRANT DELETE ON TABLE "public"."monthly_funding" TO "authenticated";

GRANT INSERT ON TABLE "public"."monthly_funding" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."monthly_funding" TO "authenticated";

GRANT SELECT ON TABLE "public"."monthly_funding" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."monthly_funding" TO "authenticated";

GRANT TRUNCATE ON TABLE "public"."monthly_funding" TO "authenticated";

GRANT UPDATE ON TABLE "public"."monthly_funding" TO "authenticated";

GRANT DELETE ON TABLE "public"."monthly_funding" TO "service_role";

GRANT INSERT ON TABLE "public"."monthly_funding" TO "service_role";

GRANT REFERENCES ON TABLE "public"."monthly_funding" TO "service_role";

GRANT SELECT ON TABLE "public"."monthly_funding" TO "service_role";

GRANT TRIGGER ON TABLE "public"."monthly_funding" TO "service_role";

GRANT TRUNCATE ON TABLE "public"."monthly_funding" TO "service_role";

GRANT UPDATE ON TABLE "public"."monthly_funding" TO "service_role";

CREATE POLICY "Everyone can SELECT gameserver containers" ON "public"."containers" AS permissive
  FOR SELECT TO authenticated, anon
    USING (TRUE);

-- Function to generate a unique username. Reads the current count of usernames starting with 'User' and appends a number to create a new username.
CREATE OR REPLACE FUNCTION "public"."generate_username"()
  RETURNS text
  LANGUAGE "sql"
  STABLE
  SECURITY DEFINER
  SET "search_path" TO ''
  AS $$
SELECT
  'User' || (SELECT COUNT(*) FROM public.profiles WHERE username LIKE 'User%') + 1
WHERE NOT EXISTS (SELECT 1 FROM public.profiles WHERE username = 'User' || (SELECT COUNT(*) FROM public.profiles WHERE username LIKE 'User%') + 1);
$$;

CREATE OR REPLACE FUNCTION "public"."handle_new_user"()
  RETURNS "trigger"
  LANGUAGE "plpgsql"
  SECURITY DEFINER
  SET "search_path" TO ''
  AS $$
BEGIN
  INSERT into public.profiles (id, username)
  VALUES (new.id, public.generate_username());
  RETURN new;
END;
$$;

