CREATE TABLE "public"."announcements"(
  "id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  "created_at" timestamp with time zone NOT NULL DEFAULT NOW(),
  "created_by" uuid NOT NULL,
  "modified_at" timestamp with time zone,
  "modified_by" uuid,
  "title" text NOT NULL,
  "description" text,
  "markdown" text NOT NULL,
  "link" text,
  "pinned" boolean NOT NULL DEFAULT FALSE
);

ALTER TABLE "public"."announcements" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."events"
  ADD COLUMN "duration_minutes" bigint;

-- Rename the existing enum type
ALTER TYPE "public"."app_permission" RENAME TO "app_permission__old_version_to_be_dropped";

-- Create the new enum type with granular permissions (no CRUD permissions)
CREATE TYPE "public"."app_permission" AS enum(
  'announcements.create',
  'announcements.delete',
  'announcements.read',
  'announcements.update',
  'containers.create',
  'containers.delete',
  'containers.read',
  'containers.update',
  'events.create',
  'events.delete',
  'events.read',
  'events.update',
  'expenses.create',
  'expenses.delete',
  'expenses.read',
  'expenses.update',
  'forums.create',
  'forums.delete',
  'forums.read',
  'forums.update',
  'funding.create',
  'funding.delete',
  'funding.read',
  'funding.update',
  'games.create',
  'games.delete',
  'games.read',
  'games.update',
  'gameservers.create',
  'gameservers.delete',
  'gameservers.read',
  'gameservers.update',
  'profiles.delete',
  'profiles.read',
  'profiles.update',
  'referendums.create',
  'referendums.delete',
  'referendums.read',
  'referendums.update',
  'servers.create',
  'servers.delete',
  'servers.read',
  'servers.update',
  'users.create',
  'users.delete',
  'users.read',
  'users.update'
);

-- Update the table to use the new enum type
ALTER TABLE "public"."role_permissions"
  ALTER COLUMN permission TYPE "public"."app_permission"
  USING permission::text::"public"."app_permission";

-- Set check_function_bodies to OFF for function creation
SET check_function_bodies = OFF;

-- Update the authorize function to use the new enum type
CREATE OR REPLACE FUNCTION public.authorize(requested_permission app_permission)
  RETURNS boolean
  LANGUAGE plpgsql
  STABLE
  SECURITY DEFINER
  SET search_path TO ''
  AS $function$
DECLARE
  bind_permissions int;
  user_role public.app_role;
BEGIN
  -- Fetch user role once and store it to reduce number of calls
  SELECT
    (auth.jwt() ->> 'user_role')::public.app_role INTO user_role;
  SELECT
    COUNT(*) INTO bind_permissions
  FROM
    public.role_permissions
  WHERE
    role_permissions.permission = requested_permission
    AND role_permissions.role = user_role;
  RETURN bind_permissions > 0;
END;
$function$;

CREATE UNIQUE INDEX announcements_pkey ON public.announcements USING btree(id);

ALTER TABLE "public"."announcements"
  ADD CONSTRAINT "announcements_pkey" PRIMARY KEY USING INDEX "announcements_pkey";

ALTER TABLE "public"."announcements"
  ADD CONSTRAINT "announcements_created_by_fkey" FOREIGN KEY (created_by) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE SET NULL NOT valid;

ALTER TABLE "public"."announcements" validate CONSTRAINT "announcements_created_by_fkey";

ALTER TABLE "public"."announcements"
  ADD CONSTRAINT "announcements_modified_by_fkey" FOREIGN KEY (modified_by) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE SET NULL NOT valid;

ALTER TABLE "public"."announcements" validate CONSTRAINT "announcements_modified_by_fkey";

GRANT DELETE ON TABLE "public"."announcements" TO "anon";

GRANT INSERT ON TABLE "public"."announcements" TO "anon";

GRANT REFERENCES ON TABLE "public"."announcements" TO "anon";

GRANT SELECT ON TABLE "public"."announcements" TO "anon";

GRANT TRIGGER ON TABLE "public"."announcements" TO "anon";

GRANT TRUNCATE ON TABLE "public"."announcements" TO "anon";

GRANT UPDATE ON TABLE "public"."announcements" TO "anon";

GRANT DELETE ON TABLE "public"."announcements" TO "authenticated";

GRANT INSERT ON TABLE "public"."announcements" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."announcements" TO "authenticated";

GRANT SELECT ON TABLE "public"."announcements" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."announcements" TO "authenticated";

GRANT TRUNCATE ON TABLE "public"."announcements" TO "authenticated";

GRANT UPDATE ON TABLE "public"."announcements" TO "authenticated";

GRANT DELETE ON TABLE "public"."announcements" TO "service_role";

GRANT INSERT ON TABLE "public"."announcements" TO "service_role";

GRANT REFERENCES ON TABLE "public"."announcements" TO "service_role";

GRANT SELECT ON TABLE "public"."announcements" TO "service_role";

GRANT TRIGGER ON TABLE "public"."announcements" TO "service_role";

GRANT TRUNCATE ON TABLE "public"."announcements" TO "service_role";

GRANT UPDATE ON TABLE "public"."announcements" TO "service_role";

-- Update all existing policies to use the new enum type
-- Update policies for events table
DO $$
BEGIN
  -- Check if the policy exists before trying to drop it
  IF EXISTS(
    SELECT
      1
    FROM
      pg_policies
    WHERE
      schemaname = 'public'
      AND tablename = 'events'
      AND policyname = 'Allow authorized roles to CRUD events') THEN
  DROP POLICY IF EXISTS "Allow authorized roles to CRUD events" ON "public"."events";
  CREATE POLICY "Allow authorized roles to INSERT events" ON "public"."events" AS permissive
    FOR INSERT TO authenticated
      WITH CHECK(public.authorize('events.create'::public.app_permission ) );
  CREATE POLICY "Allow authorized roles to UPDATE events" ON "public"."events" AS permissive
    FOR UPDATE TO authenticated
      USING(public.authorize('events.update'::public.app_permission ) );
  CREATE POLICY "Allow authorized roles to DELETE events" ON "public"."events" AS permissive
    FOR DELETE TO authenticated
      USING(public.authorize('events.delete'::public.app_permission ) );
END IF;
END
$$;

-- Update policies for games table
DO $$
BEGIN
  IF EXISTS(
    SELECT
      1
    FROM
      pg_policies
    WHERE
      schemaname = 'public'
      AND tablename = 'games'
      AND policyname = 'Allow authorized roles to CRUD games') THEN
  DROP POLICY IF EXISTS "Allow authorized roles to CRUD games" ON "public"."games";
  CREATE POLICY "Allow authorized roles to INSERT games" ON "public"."games" AS permissive
    FOR INSERT TO authenticated
      WITH CHECK(public.authorize('games.create'::public.app_permission ) );
  CREATE POLICY "Allow authorized roles to UPDATE games" ON "public"."games" AS permissive
    FOR UPDATE TO authenticated
      USING(public.authorize('games.update'::public.app_permission ) );
  CREATE POLICY "Allow authorized roles to DELETE games" ON "public"."games" AS permissive
    FOR DELETE TO authenticated
      USING(public.authorize('games.delete'::public.app_permission ) );
END IF;
END
$$;

-- Update policies for gameservers table
DO $$
BEGIN
  IF EXISTS(
    SELECT
      1
    FROM
      pg_policies
    WHERE
      schemaname = 'public'
      AND tablename = 'gameservers'
      AND policyname = 'Allow authorized roles to CRUD gameservers') THEN
  DROP POLICY IF EXISTS "Allow authorized roles to CRUD gameservers" ON "public"."gameservers";
  CREATE POLICY "Allow authorized roles to INSERT gameservers" ON "public"."gameservers" AS permissive
    FOR INSERT TO authenticated
      WITH CHECK(public.authorize('gameservers.create'::public.app_permission ) );
  CREATE POLICY "Allow authorized roles to UPDATE gameservers" ON "public"."gameservers" AS permissive
    FOR UPDATE TO authenticated
      USING(public.authorize('gameservers.update'::public.app_permission ) );
  CREATE POLICY "Allow authorized roles to DELETE gameservers" ON "public"."gameservers" AS permissive
    FOR DELETE TO authenticated
      USING(public.authorize('gameservers.delete'::public.app_permission ) );
END IF;
END
$$;

-- Update policies for profiles table
DO $$
BEGIN
  IF EXISTS(
    SELECT
      1
    FROM
      pg_policies
    WHERE
      schemaname = 'public'
      AND tablename = 'profiles'
      AND policyname = 'Allow authorized roles to CRUD profiles') THEN
  DROP POLICY IF EXISTS "Allow authorized roles to CRUD profiles" ON "public"."profiles";
  CREATE POLICY "Allow authorized roles to UPDATE profiles" ON "public"."profiles" AS permissive
    FOR UPDATE TO authenticated
      USING(public.authorize('profiles.update'::public.app_permission ) );
  CREATE POLICY "Allow authorized roles to DELETE profiles" ON "public"."profiles" AS permissive
    FOR DELETE TO authenticated
      USING(public.authorize('profiles.delete'::public.app_permission ) );
END IF;
END
$$;

-- Update policies for referendums table
DO $$
BEGIN
  IF EXISTS(
    SELECT
      1
    FROM
      pg_policies
    WHERE
      schemaname = 'public'
      AND tablename = 'referendums'
      AND policyname = 'Allow authorized roles to CRUD referendums') THEN
  DROP POLICY IF EXISTS "Allow authorized roles to CRUD referendums" ON "public"."referendums";
  CREATE POLICY "Allow authorized roles to INSERT referendums" ON "public"."referendums" AS permissive
    FOR INSERT TO authenticated
      WITH CHECK(public.authorize('referendums.create'::public.app_permission ) );
  CREATE POLICY "Allow authorized roles to UPDATE referendums" ON "public"."referendums" AS permissive
    FOR UPDATE TO authenticated
      USING(public.authorize('referendums.update'::public.app_permission ) );
  CREATE POLICY "Allow authorized roles to DELETE referendums" ON "public"."referendums" AS permissive
    FOR DELETE TO authenticated
      USING(public.authorize('referendums.delete'::public.app_permission ) );
END IF;
END
$$;

-- Update policies for user_roles table
DO $$
BEGIN
  IF EXISTS(
    SELECT
      1
    FROM
      pg_policies
    WHERE
      schemaname = 'public'
      AND tablename = 'user_roles'
      AND policyname = 'Allow authorized roles to CRUD user roles') THEN
  DROP POLICY IF EXISTS "Allow authorized roles to CRUD user roles" ON "public"."user_roles";
  CREATE POLICY "Allow authorized roles to INSERT user roles" ON "public"."user_roles" AS permissive
    FOR INSERT TO authenticated
      WITH CHECK(public.authorize('users.create'::public.app_permission ) );
  CREATE POLICY "Allow authorized roles to UPDATE user roles" ON "public"."user_roles" AS permissive
    FOR UPDATE TO authenticated
      USING(public.authorize('users.update'::public.app_permission ) );
  CREATE POLICY "Allow authorized roles to DELETE user roles" ON "public"."user_roles" AS permissive
    FOR DELETE TO authenticated
      USING(public.authorize('users.delete'::public.app_permission ) );
END IF;
END
$$;

-- Update policies for referendum_votes table
DO $$
BEGIN
  IF EXISTS(
    SELECT
      1
    FROM
      pg_policies
    WHERE
      schemaname = 'public'
      AND tablename = 'referendum_votes'
      AND policyname = 'Authorized users can CRUD votes') THEN
  DROP POLICY IF EXISTS "Authorized users can CRUD votes" ON "public"."referendum_votes";
  CREATE POLICY "Authorized users can INSERT votes" ON "public"."referendum_votes" AS permissive
    FOR INSERT TO authenticated
      WITH CHECK(public.authorize('referendums.create'::public.app_permission ) );
  CREATE POLICY "Authorized users can UPDATE votes" ON "public"."referendum_votes" AS permissive
    FOR UPDATE TO authenticated
      USING(public.authorize('referendums.update'::public.app_permission ) );
  CREATE POLICY "Authorized users can DELETE votes" ON "public"."referendum_votes" AS permissive
    FOR DELETE TO authenticated
      USING(public.authorize('referendums.delete'::public.app_permission ) );
END IF;
END
$$;

-- Update policies for expenses table
DO $$
BEGIN
  IF EXISTS(
    SELECT
      1
    FROM
      pg_policies
    WHERE
      schemaname = 'public'
      AND tablename = 'expenses'
      AND policyname = 'Allow authorized roles to CRUD expenses') THEN
  DROP POLICY IF EXISTS "Allow authorized roles to CRUD expenses" ON "public"."expenses";
  CREATE POLICY "Allow authorized roles to INSERT expenses" ON "public"."expenses" AS permissive
    FOR INSERT TO authenticated
      WITH CHECK(public.authorize('expenses.create'::public.app_permission ) );
  CREATE POLICY "Allow authorized roles to UPDATE expenses" ON "public"."expenses" AS permissive
    FOR UPDATE TO authenticated
      USING(public.authorize('expenses.update'::public.app_permission ) );
  CREATE POLICY "Allow authorized roles to DELETE expenses" ON "public"."expenses" AS permissive
    FOR DELETE TO authenticated
      USING(public.authorize('expenses.delete'::public.app_permission ) );
END IF;
END
$$;

-- Update policies for servers table
DO $$
BEGIN
  IF EXISTS(
    SELECT
      1
    FROM
      pg_policies
    WHERE
      schemaname = 'public'
      AND tablename = 'servers'
      AND policyname = 'Allow authorized roles to CRUD servers') THEN
  DROP POLICY IF EXISTS "Allow authorized roles to CRUD servers" ON "public"."servers";
  CREATE POLICY "Allow authorized roles to INSERT servers" ON "public"."servers" AS permissive
    FOR INSERT TO authenticated
      WITH CHECK(public.authorize('servers.create'::public.app_permission ) );
  CREATE POLICY "Allow authorized roles to UPDATE servers" ON "public"."servers" AS permissive
    FOR UPDATE TO authenticated
      USING(public.authorize('servers.update'::public.app_permission ) );
  CREATE POLICY "Allow authorized roles to DELETE servers" ON "public"."servers" AS permissive
    FOR DELETE TO authenticated
      USING(public.authorize('servers.delete'::public.app_permission ) );
END IF;
END
$$;

-- Update policies for storage.objects table
DO $$
BEGIN
  IF EXISTS(
    SELECT
      1
    FROM
      pg_policies
    WHERE
      schemaname = 'storage'
      AND tablename = 'objects'
      AND policyname = 'Allow authorized roles to CRUD games in storage') THEN
  DROP POLICY IF EXISTS "Allow authorized roles to CRUD games in storage" ON "storage"."objects";
  CREATE POLICY "Allow authorized roles to INSERT games in storage" ON "storage"."objects"
    FOR INSERT
      WITH CHECK(public.authorize('games.create'::public.app_permission ) );
  CREATE POLICY "Allow authorized roles to UPDATE games in storage" ON "storage"."objects"
    FOR UPDATE
      USING(public.authorize('games.update'::public.app_permission ) );
  CREATE POLICY "Allow authorized roles to DELETE games in storage" ON "storage"."objects"
    FOR DELETE
      USING(public.authorize('games.delete'::public.app_permission ) );
END IF;
END
$$;

-- Update policies for containers table
DO $$
BEGIN
  IF EXISTS(
    SELECT
      1
    FROM
      pg_policies
    WHERE
      schemaname = 'public'
      AND tablename = 'containers'
      AND policyname = 'Allow authorized roles to DELETE stale containers') THEN
  DROP POLICY IF EXISTS "Allow authorized roles to DELETE stale containers" ON "public"."containers";
  CREATE POLICY "Allow authorized roles to DELETE stale containers" ON "public"."containers" AS permissive
    FOR DELETE TO authenticated
      USING((public.authorize('containers.delete'::public.app_permission ) AND(NOT running ) AND(reported_at <=(NOW( ) - '02:00:00'::interval ) ) ) );
END IF;
END
$$;

-- Add RLS policies for announcements
CREATE POLICY "Everyone can SELECT announcements" ON "public"."announcements"
  FOR SELECT TO "authenticated", "anon"
    USING (TRUE);

CREATE POLICY "Allow authorized roles to INSERT announcements" ON "public"."announcements" AS permissive
  FOR INSERT TO authenticated
    WITH CHECK (public.authorize('announcements.create'::public.app_permission));

CREATE POLICY "Allow authorized roles to UPDATE announcements" ON "public"."announcements" AS permissive
  FOR UPDATE TO authenticated
    USING (public.authorize('announcements.update'::public.app_permission));

CREATE POLICY "Allow authorized roles to DELETE announcements" ON "public"."announcements" AS permissive
  FOR DELETE TO authenticated
    USING (public.authorize('announcements.delete'::public.app_permission));

-- Explicitly drop the old authorize function that uses the old enum type
DO $$
BEGIN
  IF EXISTS(
    SELECT
      1
    FROM
      pg_proc p
      JOIN pg_namespace n ON p.pronamespace = n.oid
      JOIN pg_type t ON p.proargtypes[0] = t.oid
    WHERE
      n.nspname = 'public'
      AND p.proname = 'authorize'
      AND t.typname = 'app_permission__old_version_to_be_dropped') THEN
  DROP FUNCTION IF EXISTS public.authorize(app_permission__old_version_to_be_dropped);
END IF;
END
$$;

-- Now it's safe to drop the old type
DROP TYPE "public"."app_permission__old_version_to_be_dropped";

