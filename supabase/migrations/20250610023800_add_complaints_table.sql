-- Create complaints table
CREATE TABLE "public"."complaints"(
  "id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  "created_at" timestamp with time zone NOT NULL DEFAULT NOW(),
  "created_by" uuid NOT NULL,
  "message" text NOT NULL,
  "response" text,
  "responded_by" uuid,
  "responded_at" timestamp with time zone,
  "acknowledged" boolean NOT NULL DEFAULT FALSE
);

-- Enable RLS on complaints table
ALTER TABLE "public"."complaints" ENABLE ROW LEVEL SECURITY;

-- Create primary key for complaints
CREATE UNIQUE INDEX complaints_pkey ON public.complaints USING btree(id);

ALTER TABLE "public"."complaints"
  ADD CONSTRAINT "complaints_pkey" PRIMARY KEY USING INDEX "complaints_pkey";

-- Add foreign key constraints for complaints
ALTER TABLE "public"."complaints"
  ADD CONSTRAINT "complaints_created_by_fkey" FOREIGN KEY (created_by) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;

ALTER TABLE "public"."complaints" VALIDATE CONSTRAINT "complaints_created_by_fkey";

ALTER TABLE "public"."complaints"
  ADD CONSTRAINT "complaints_responded_by_fkey" FOREIGN KEY (responded_by) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE SET NULL NOT VALID;

ALTER TABLE "public"."complaints" VALIDATE CONSTRAINT "complaints_responded_by_fkey";

-- Grant permissions on complaints table
GRANT DELETE ON TABLE "public"."complaints" TO "anon";

GRANT INSERT ON TABLE "public"."complaints" TO "anon";

GRANT REFERENCES ON TABLE "public"."complaints" TO "anon";

GRANT SELECT ON TABLE "public"."complaints" TO "anon";

GRANT TRIGGER ON TABLE "public"."complaints" TO "anon";

GRANT TRUNCATE ON TABLE "public"."complaints" TO "anon";

GRANT UPDATE ON TABLE "public"."complaints" TO "anon";

GRANT DELETE ON TABLE "public"."complaints" TO "authenticated";

GRANT INSERT ON TABLE "public"."complaints" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."complaints" TO "authenticated";

GRANT SELECT ON TABLE "public"."complaints" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."complaints" TO "authenticated";

GRANT TRUNCATE ON TABLE "public"."complaints" TO "authenticated";

GRANT UPDATE ON TABLE "public"."complaints" TO "authenticated";

GRANT DELETE ON TABLE "public"."complaints" TO "service_role";

GRANT INSERT ON TABLE "public"."complaints" TO "service_role";

GRANT REFERENCES ON TABLE "public"."complaints" TO "service_role";

GRANT SELECT ON TABLE "public"."complaints" TO "service_role";

GRANT TRIGGER ON TABLE "public"."complaints" TO "service_role";

GRANT TRUNCATE ON TABLE "public"."complaints" TO "service_role";

GRANT UPDATE ON TABLE "public"."complaints" TO "service_role";

-- Add RLS policies for complaints table
-- Users can read their own complaints OR admins/moderators with complaints.read permission can read all
CREATE POLICY "Users can read own complaints or authorized roles can read all" ON "public"."complaints"
  FOR SELECT TO authenticated
    USING (public.is_owner(created_by)
      OR public.has_permission('complaints.read'::public.app_permission));

-- Users can create their own complaints OR authorized roles can create complaints
CREATE POLICY "Users can create own complaints or authorized roles can create" ON "public"."complaints"
  FOR INSERT TO authenticated
    WITH CHECK (public.is_owner(created_by)
    OR public.has_permission('complaints.create'::public.app_permission));

-- Only authorized roles can update complaints (for responses)
CREATE POLICY "Allow authorized roles to UPDATE complaints" ON "public"."complaints"
  FOR UPDATE TO authenticated
    USING (public.has_permission('complaints.update'::public.app_permission));

-- Only authorized roles can delete complaints
CREATE POLICY "Allow authorized roles to DELETE complaints" ON "public"."complaints"
  FOR DELETE TO authenticated
    USING (public.has_permission('complaints.delete'::public.app_permission));

