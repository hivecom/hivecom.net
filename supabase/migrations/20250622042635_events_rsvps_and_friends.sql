-- Create RSVP enum type
CREATE TYPE "public"."events_rsvp_status" AS ENUM(
  'yes',
  'no',
  'tentative'
);

-- Create events_rsvps table
CREATE TABLE "public"."events_rsvps"(
  "id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  "created_at" timestamp with time zone NOT NULL DEFAULT NOW(),
  "modified_at" timestamp with time zone,
  "user_id" uuid NOT NULL,
  "event_id" bigint NOT NULL,
  "rsvp" "public"."events_rsvp_status" NOT NULL,
  "created_by" uuid,
  "modified_by" uuid
);

-- Enable RLS on events_rsvps table
ALTER TABLE "public"."events_rsvps" ENABLE ROW LEVEL SECURITY;

-- Create friends table
CREATE TABLE "public"."friends"(
  "id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  "created_at" timestamp with time zone NOT NULL DEFAULT NOW(),
  "friender" uuid NOT NULL,
  "friend" uuid NOT NULL
);

-- Enable RLS on friends table
ALTER TABLE "public"."friends" ENABLE ROW LEVEL SECURITY;

-- Create primary keys
CREATE UNIQUE INDEX events_rsvps_pkey ON public.events_rsvps USING btree(id);

CREATE UNIQUE INDEX friends_pkey ON public.friends USING btree(id);

ALTER TABLE "public"."events_rsvps"
  ADD CONSTRAINT "events_rsvps_pkey" PRIMARY KEY USING INDEX "events_rsvps_pkey";

ALTER TABLE "public"."friends"
  ADD CONSTRAINT "friends_pkey" PRIMARY KEY USING INDEX "friends_pkey";

-- Create unique constraints to prevent duplicate RSVPs and friend relationships
CREATE UNIQUE INDEX events_rsvps_user_event_key ON public.events_rsvps USING btree(user_id, event_id);

CREATE UNIQUE INDEX friends_friender_friend_key ON public.friends USING btree(friender, friend);

ALTER TABLE "public"."events_rsvps"
  ADD CONSTRAINT "events_rsvps_user_event_key" UNIQUE USING INDEX "events_rsvps_user_event_key";

ALTER TABLE "public"."friends"
  ADD CONSTRAINT "friends_friender_friend_key" UNIQUE USING INDEX "friends_friender_friend_key";

-- Add foreign key constraints for events_rsvps
ALTER TABLE "public"."events_rsvps"
  ADD CONSTRAINT "events_rsvps_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;

ALTER TABLE "public"."events_rsvps" VALIDATE CONSTRAINT "events_rsvps_user_id_fkey";

ALTER TABLE "public"."events_rsvps"
  ADD CONSTRAINT "events_rsvps_event_id_fkey" FOREIGN KEY (event_id) REFERENCES public.events(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;

ALTER TABLE "public"."events_rsvps" VALIDATE CONSTRAINT "events_rsvps_event_id_fkey";

ALTER TABLE "public"."events_rsvps"
  ADD CONSTRAINT "events_rsvps_created_by_fkey" FOREIGN KEY (created_by) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE SET NULL NOT VALID;

ALTER TABLE "public"."events_rsvps" VALIDATE CONSTRAINT "events_rsvps_created_by_fkey";

ALTER TABLE "public"."events_rsvps"
  ADD CONSTRAINT "events_rsvps_modified_by_fkey" FOREIGN KEY (modified_by) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE SET NULL NOT VALID;

ALTER TABLE "public"."events_rsvps" VALIDATE CONSTRAINT "events_rsvps_modified_by_fkey";

-- Add foreign key constraints for friends
ALTER TABLE "public"."friends"
  ADD CONSTRAINT "friends_friender_fkey" FOREIGN KEY (friender) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;

ALTER TABLE "public"."friends" VALIDATE CONSTRAINT "friends_friender_fkey";

ALTER TABLE "public"."friends"
  ADD CONSTRAINT "friends_friend_fkey" FOREIGN KEY (friend) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;

ALTER TABLE "public"."friends" VALIDATE CONSTRAINT "friends_friend_fkey";

-- Add constraint to prevent self-friending
ALTER TABLE "public"."friends"
  ADD CONSTRAINT "friends_no_self_friend" CHECK (friender != friend);

-- Create indexes for efficient queries
CREATE INDEX IF NOT EXISTS "idx_events_rsvps_event_id" ON "public"."events_rsvps"("event_id");

CREATE INDEX IF NOT EXISTS "idx_events_rsvps_user_id" ON "public"."events_rsvps"("user_id");

CREATE INDEX IF NOT EXISTS "idx_events_rsvps_rsvp" ON "public"."events_rsvps"("rsvp");

CREATE INDEX IF NOT EXISTS "idx_friends_friender" ON "public"."friends"("friender");

CREATE INDEX IF NOT EXISTS "idx_friends_friend" ON "public"."friends"("friend");

-- Grant permissions for events_rsvps
GRANT DELETE ON TABLE "public"."events_rsvps" TO "anon";

GRANT INSERT ON TABLE "public"."events_rsvps" TO "anon";

GRANT REFERENCES ON TABLE "public"."events_rsvps" TO "anon";

GRANT SELECT ON TABLE "public"."events_rsvps" TO "anon";

GRANT TRIGGER ON TABLE "public"."events_rsvps" TO "anon";

GRANT TRUNCATE ON TABLE "public"."events_rsvps" TO "anon";

GRANT UPDATE ON TABLE "public"."events_rsvps" TO "anon";

GRANT DELETE ON TABLE "public"."events_rsvps" TO "authenticated";

GRANT INSERT ON TABLE "public"."events_rsvps" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."events_rsvps" TO "authenticated";

GRANT SELECT ON TABLE "public"."events_rsvps" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."events_rsvps" TO "authenticated";

GRANT TRUNCATE ON TABLE "public"."events_rsvps" TO "authenticated";

GRANT UPDATE ON TABLE "public"."events_rsvps" TO "authenticated";

GRANT DELETE ON TABLE "public"."events_rsvps" TO "service_role";

GRANT INSERT ON TABLE "public"."events_rsvps" TO "service_role";

GRANT REFERENCES ON TABLE "public"."events_rsvps" TO "service_role";

GRANT SELECT ON TABLE "public"."events_rsvps" TO "service_role";

GRANT TRIGGER ON TABLE "public"."events_rsvps" TO "service_role";

GRANT TRUNCATE ON TABLE "public"."events_rsvps" TO "service_role";

GRANT UPDATE ON TABLE "public"."events_rsvps" TO "service_role";

-- Grant permissions for friends
GRANT DELETE ON TABLE "public"."friends" TO "anon";

GRANT INSERT ON TABLE "public"."friends" TO "anon";

GRANT REFERENCES ON TABLE "public"."friends" TO "anon";

GRANT SELECT ON TABLE "public"."friends" TO "anon";

GRANT TRIGGER ON TABLE "public"."friends" TO "anon";

GRANT TRUNCATE ON TABLE "public"."friends" TO "anon";

GRANT UPDATE ON TABLE "public"."friends" TO "anon";

GRANT DELETE ON TABLE "public"."friends" TO "authenticated";

GRANT INSERT ON TABLE "public"."friends" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."friends" TO "authenticated";

GRANT SELECT ON TABLE "public"."friends" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."friends" TO "authenticated";

GRANT TRUNCATE ON TABLE "public"."friends" TO "authenticated";

GRANT UPDATE ON TABLE "public"."friends" TO "authenticated";

GRANT DELETE ON TABLE "public"."friends" TO "service_role";

GRANT INSERT ON TABLE "public"."friends" TO "service_role";

GRANT REFERENCES ON TABLE "public"."friends" TO "service_role";

GRANT SELECT ON TABLE "public"."friends" TO "service_role";

GRANT TRIGGER ON TABLE "public"."friends" TO "service_role";

GRANT TRUNCATE ON TABLE "public"."friends" TO "service_role";

GRANT UPDATE ON TABLE "public"."friends" TO "service_role";

-- RLS Policies for events_rsvps
-- Users can read all RSVPs (for seeing who's attending events)
CREATE POLICY "Users can SELECT events_rsvps" ON "public"."events_rsvps"
  FOR SELECT TO authenticated
    USING (TRUE);

-- Users can manage their own RSVPs
CREATE POLICY "Users can manage own RSVPs" ON "public"."events_rsvps"
  FOR ALL TO authenticated
    USING (user_id = auth.uid())
    WITH CHECK (user_id = auth.uid());

-- Authorized roles can manage all RSVPs
CREATE POLICY "Allow authorized roles to INSERT events_rsvps" ON "public"."events_rsvps" AS permissive
  FOR INSERT TO authenticated
    WITH CHECK (public.has_permission('events.create'::public.app_permission));

CREATE POLICY "Allow authorized roles to UPDATE events_rsvps" ON "public"."events_rsvps" AS permissive
  FOR UPDATE TO authenticated
    USING (public.has_permission('events.update'::public.app_permission));

CREATE POLICY "Allow authorized roles to DELETE events_rsvps" ON "public"."events_rsvps" AS permissive
  FOR DELETE TO authenticated
    USING (public.has_permission('events.delete'::public.app_permission));

-- RLS Policies for friends
-- Users can see all friend relationships (for mutual friend discovery, etc.)
CREATE POLICY "Users can SELECT friends" ON "public"."friends"
  FOR SELECT TO authenticated
    USING (TRUE);

-- Users can manage friend relationships they initiated
CREATE POLICY "Users can manage own friend relationships" ON "public"."friends"
  FOR ALL TO authenticated
    USING (friender = auth.uid())
    WITH CHECK (friender = auth.uid());

-- Add automatic audit field triggers
CREATE TRIGGER update_events_rsvps_audit_fields
  BEFORE UPDATE ON public.events_rsvps
  FOR EACH ROW
  EXECUTE FUNCTION public.update_audit_fields();

CREATE TRIGGER update_friends_audit_fields
  BEFORE UPDATE ON public.friends
  FOR EACH ROW
  EXECUTE FUNCTION public.update_audit_fields();

-- Add table and column comments
COMMENT ON TABLE "public"."events_rsvps" IS 'Event RSVPs tracking user attendance intentions for community events';

COMMENT ON COLUMN "public"."events_rsvps"."id" IS 'Unique identifier for the RSVP';

COMMENT ON COLUMN "public"."events_rsvps"."created_at" IS 'Timestamp when the RSVP was created';

COMMENT ON COLUMN "public"."events_rsvps"."modified_at" IS 'Timestamp when the RSVP was last modified';

COMMENT ON COLUMN "public"."events_rsvps"."user_id" IS 'User ID who is RSVPing to the event';

COMMENT ON COLUMN "public"."events_rsvps"."event_id" IS 'Event ID being RSVPed to';

COMMENT ON COLUMN "public"."events_rsvps"."rsvp" IS 'RSVP status: yes (attending), no (not attending), tentative (maybe attending)';

COMMENT ON COLUMN "public"."events_rsvps"."created_by" IS 'User ID who created this RSVP record (for admin management)';

COMMENT ON COLUMN "public"."events_rsvps"."modified_by" IS 'User ID who last modified this RSVP record';

COMMENT ON TABLE "public"."friends" IS 'Friend relationships between users, supporting one-way and mutual friendships';

COMMENT ON COLUMN "public"."friends"."id" IS 'Unique identifier for the friend relationship';

COMMENT ON COLUMN "public"."friends"."created_at" IS 'Timestamp when the friend relationship was created';

COMMENT ON COLUMN "public"."friends"."friender" IS 'User ID who initiated the friend relationship';

COMMENT ON COLUMN "public"."friends"."friend" IS 'User ID who is being friended';

COMMENT ON TYPE "public"."events_rsvp_status" IS 'RSVP status options for event attendance';

